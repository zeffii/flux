import collections

data_cache_ = {}


def make_update_list_from_graph(ng, graph, from_node):

    if from_node:
        # start composing update_list ignoring upstream of "from_node"
        return []    

    return []


def evaluate_graph(ng, graph, from_node=None):

    """
    the goal of this function is to perform evaluation on all nodes in the given graph.
    the graph can be a subset of nodes, or the whole tree. 

    "graph" is expected to be an iterable of nodes, likely generated by "make_dependency_graph"

    """

    graph_processing_health = "healthy"

    update_list = make_update_list_from_graph(ng, graph, from_node)

    for node in graph:

        if graph_processing_health == "healthy":

            try:
                node.evaluate()
                node.status = "finished evaluation"
            except Exception as err:
                print(node.name, err)
                node.status = "failed evaluation"
                graph_processing_health = "halted"

        else:
            node.status = "unprocessed"


def make_dependency_graph(ng):

    """
    lifted from sverchok, with major decapitations
    """

    deps = collections.defaultdict(set)

    for i, link in enumerate(list(ng.links)):
        #  this proctects against a rare occurance where
        #  a link is considered valid without a to_socket
        #  or a from_socket. proctects against a blender crash
        #  see https://github.com/nortikin/sverchok/issues/493
        if not (link.to_socket and link.from_socket):
            ng.links.remove(link)
            raise ValueError("Invalid link found!, please report this file")

        if not link.is_valid:
            return collections.defaultdict(set)  # this happens more often than one might think

        if link.is_hidden:
            continue

        key, value = (link.to_node.name, link.from_node.name)
        deps[key].add(value)

    return deps


def freeze_node_tree(ng):
    ...